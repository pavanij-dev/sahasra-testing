name: Lighthouse CI Audit

on:
  workflow_dispatch:

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Lighthouse CI
        run: |
          # Install Lighthouse CI globally
          npm install -g @lhci/cli@0.12.x
          
          # Create package-lock.json if it doesn't exist
          if [ -f package.json ] && [ ! -f package-lock.json ]; then
            npm install --package-lock-only
          fi
          
          # Install local dependencies if package.json exists
          if [ -f package.json ]; then
            npm ci --prefer-offline --no-audit
          fi

      - name: Create Lighthouse CI config
        run: |
          cat > lighthouserc.json << 'EOF'
          {
            "ci": {
              "collect": {
                "url": [
                  "http://localhost:8000/",
                  "http://localhost:8000/about-us.php",
                  "http://localhost:8000/products.php",
                  "http://localhost:8000/contact-us.php",
                  "http://localhost:8000/cdmo.php"
                ],
                "numberOfRuns": 3,
                "settings": {
                  "chromeFlags": "--no-sandbox --disable-dev-shm-usage --disable-gpu",
                  "onlyCategories": ["performance", "accessibility", "best-practices", "seo"],
                  "formFactor": "desktop",
                  "screenEmulation": {
                    "mobile": false,
                    "width": 1350,
                    "height": 940,
                    "deviceScaleFactor": 1,
                    "disabled": false
                  },
                  "throttling": {
                    "rttMs": 40,
                    "throughputKbps": 10240,
                    "cpuSlowdownMultiplier": 1,
                    "requestLatencyMs": 0,
                    "downloadThroughputKbps": 0,
                    "uploadThroughputKbps": 0
                  }
                }
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.8}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["warn", {"minScore": 0.8}],
                  "categories:seo": ["warn", {"minScore": 0.8}],
                  "first-contentful-paint": ["warn", {"maxNumericValue": 2000}],
                  "largest-contentful-paint": ["warn", {"maxNumericValue": 2500}],
                  "cumulative-layout-shift": ["warn", {"maxNumericValue": 0.1}],
                  "total-blocking-time": ["warn", {"maxNumericValue": 300}],
                  "speed-index": ["warn", {"maxNumericValue": 3000}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

      - name: Start PHP server
        run: |
          # Install PHP if not available
          sudo apt-get update
          sudo apt-get install -y php php-cli php-common
          
          # Start PHP server in background
          php -S localhost:8000 > /dev/null 2>&1 &
          echo "PHP server started on localhost:8000"
          
          # Wait for server to be ready
          sleep 10

      - name: Run Lighthouse CI
        run: |
          # Run Lighthouse CI
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/

      - name: Create performance report
        run: |
          if [ -f .lighthouseci/manifest.json ]; then
            echo "# Lighthouse Performance Report" > lighthouse-report.md
            echo "Generated on: $(date)" >> lighthouse-report.md
            echo "" >> lighthouse-report.md
            
            # Parse manifest and create report
            node -e "
              const fs = require('fs');
              const manifest = JSON.parse(fs.readFileSync('.lighthouseci/manifest.json', 'utf8'));
              
              manifest.forEach((result) => {
                const summary = result.summary;
                const url = result.url;
                const audits = result.audits;
                
                console.log(`## ${url}`);
                console.log(`- Performance: ${(summary.performance * 100).toFixed(0)}%`);
                console.log(`- Accessibility: ${(summary.accessibility * 100).toFixed(0)}%`);
                console.log(`- Best Practices: ${(summary['best-practices'] * 100).toFixed(0)}%`);
                console.log(`- SEO: ${(summary.seo * 100).toFixed(0)}%`);
                console.log('');
                console.log('### Key Metrics:');
                console.log(`- First Contentful Paint: ${audits['first-contentful-paint'].displayValue}`);
                console.log(`- Largest Contentful Paint: ${audits['largest-contentful-paint'].displayValue}`);
                console.log(`- Cumulative Layout Shift: ${audits['cumulative-layout-shift'].displayValue}`);
                console.log(`- Total Blocking Time: ${audits['total-blocking-time'].displayValue}`);
                console.log(`- Speed Index: ${audits['speed-index'].displayValue}`);
                console.log('');
              });
            " >> lighthouse-report.md
          fi

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: lighthouse-report.md
